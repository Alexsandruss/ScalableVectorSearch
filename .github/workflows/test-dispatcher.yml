# Copyright 2025 Intel Corporation
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

name: Test ISA dispatcher
on:
  push:
    branches: [ main ]
  pull_request:
  workflow_dispatch:

# This allows a subsequently queued workflow run to interrupt previous runs
concurrency:
  group: '${{ github.workflow }} @ ${{ github.event.pull_request.head.label || github.head_ref || github.ref }}'
  cancel-in-progress: true

jobs:
  test-dispatcher-linux-x86:
    name: Test Dispatcher (Linux x86)
    runs-on: self-hosted
    env:
      https_proxy: http://proxy-dmz.intel.com:912
      http_proxy: http://proxy-dmz.intel.com:911
      no_proxy: localhost,127.0.0.1

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          submodules: recursive
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Install prerequisites
        run: |
          sudo apt-get update
          sudo apt-get install -y wget tar grep

      - name: Download Intel SDE
        run: |
          wget --content-disposition "https://downloadmirror.intel.com/850782/sde-external-9.53.0-2025-03-16-lin.tar.xz"
          tar -xf sde-external-*-lin.tar.xz
          cd sde-external-*/  
          export PATH="$PWD:$PATH"
          echo "$PWD" >> $GITHUB_PATH
          cd ..

      - name: Install archspec and Get Host Microarch
        run: |
          python -m pip install archspec
          python -c "import archspec.cpu; print(archspec.cpu.host().name)"

      - name: Validate dispatcher under SDE  
        run: |
          cd bindings/python
          pip install --force-reinstall .
          for flag in nhm hsw skx clx icl spr; do
            export SDE_FLAG=$flag
            sde64 -$flag --  python -m unittest discover -p "test_microarch.py" -s .
          done

  # test-dispatcher-linux-arm:
  #   name: Test Dispatcher (Linux ARM)
  #   runs-on: ubuntu-22.04-arm
  #   strategy:
  #     matrix:
  #       cxx: [g++-11, g++-12, clang++-15]
  #       include:
  #         - cxx: g++-11
  #           cc: gcc-11
  #         - cxx: g++-12
  #           cc: gcc-12
  #         - cxx: clang++-15
  #           cc: clang-15

  #   steps:
  #     - name: Checkout repository
  #       uses: actions/checkout@v4
  #       with:
  #         fetch-depth: 0
  #         submodules: recursive

  #     - name: Install archspec and Get Host Microarch
  #       run: |
  #         python -m pip install archspec
  #         python -c "import archspec.cpu; print(archspec.cpu.host().name)"

  #     - name: Build and Test Python Bindings
  #       env:
  #         CXX: ${{ matrix.cxx }}
  #         CC: ${{ matrix.cc }}
  #       run: |
  #         cd bindings/python
  #         pip install --force-reinstall .
  #         python -m unittest discover -p "test_microarch.py" -s .

  # test-dispatcher-macos:
  #   name: Test Dispatcher (macOS)
  #   runs-on: macos-latest
  #   strategy:
  #     matrix:
  #       cxx: [clang++-15]
  #       include:
  #         - cxx: clang++-15
  #           package: llvm@15
  #           cc_name: clang
  #           cxx_name: clang++
  #           needs_prefix: true

  #   steps:
  #     - name: Checkout repository
  #       uses: actions/checkout@v4
  #       with:
  #         fetch-depth: 0
  #         submodules: recursive

  #     - name: Install archspec and Get Host Microarch
  #       run: |
  #         python -m pip install archspec
  #         python -c "import archspec.cpu; print(archspec.cpu.host().name)"

  #     - name: Install Compiler
  #       run: |
  #         echo "Installing ${{ matrix.package }}..."
  #         brew install ${{ matrix.package }}

  #     - name: Build and Test Python Bindings
  #       run: |
  #         if [[ "${{ matrix.needs_prefix }}" == "true" ]]; then
  #           # For non-default packages like llvm@15, get the install prefix
  #           COMPILER_PREFIX=$(brew --prefix ${{ matrix.package }})
  #           export CC="${COMPILER_PREFIX}/bin/${{ matrix.cc_name }}"
  #           export CXX="${COMPILER_PREFIX}/bin/${{ matrix.cxx_name }}"
  #         else
  #           # For versioned GCC installs, the name is usually directly available
  #           export CC="${{ matrix.cc_name }}"
  #           export CXX="${{ matrix.cxx_name }}"
  #         fi
          
  #         cd bindings/python
  #         pip install --force-reinstall .
  #         python -m unittest discover -p "test_microarch.py" -s .
